O menu inicial exibe as seguintes opções:

[1] Criptografar Texto
[2] Criptografar Arquivo (Imagem/PDF/Áudio)
[3] Descriptografar Arquivo
[4] Criptografar Múltiplos Arquivos
[5] Gerar Token Efêmero
[6] Criar Volume Oculto (Negação Plausível)
[0] Sair

A seguir, detalhamos o que cada opção faz:

[1] Criptografar Texto

- Fluxo:  
  1. Entrada de Texto: O programa solicita que o usuário digite uma mensagem (texto) a ser criptografado.  
  2. Arquivo-chave (Opcional): É perguntado se o usuário deseja usar um arquivo-chave para aumentar a entropia da senha.  
  3. Senha: Solicita a senha e valida se ela atende aos requisitos (mínimo 8 caracteres, letras maiúsculas/minúsculas, dígitos e caracteres especiais, além da avaliação pelo zxcvbn).  
  4. Criptografia:  
     - O texto é criptografado usando a função `encrypt_data_single`, que realiza a derivação de chave (via Argon2id) e utiliza ChaCha20Poly1305 para criptografia autenticada.  
     - Os metadados (como salt, parâmetros do Argon2, tipo do arquivo, etc.) são armazenados em um arquivo `.meta` cifrado.
  5. Resultado: O arquivo criptografado é salvo na pasta padrão (`~/Documents/Encoded_files_folder`) e uma mensagem confirma o sucesso.

[2] Criptografar Arquivo (Imagem/PDF/Áudio)

- Fluxo:  
  1. Seleção do Arquivo: Solicita ao usuário o caminho do arquivo que deseja criptografar.  
  2. Arquivo-chave (Opcional): Pergunta se o usuário deseja usar um arquivo-chave para aumentar a entropia.  
  3. Verificação de Tamanho:  
     - Se o arquivo for maior que o limiar definido (10 MB), o programa utiliza a criptografia em _streaming_ (processamento em chunks) com a função `encrypt_data_streaming`.  
     - Se for menor, usa a criptografia single-shot com `encrypt_data_single`.
  4. Criptografia e Metadados:  
     - A operação gera o arquivo criptografado e um arquivo de metadados (.meta) contendo as informações necessárias para a decriptação.
  5. Resultado: Arquivo salvo na pasta padrão, com mensagem de confirmação.

[3] Descriptografar Arquivo

- Fluxo:  
  1. Listagem dos Arquivos: O programa exibe todos os arquivos criptografados (arquivos com extensão `.enc`) presentes em `~/Documents/Encoded_files_folder`.  
  2. Seleção: O usuário escolhe qual arquivo deseja descriptografar.  
  3. Arquivo-chave (Opcional): Se aplicável, pergunta se deseja usar um arquivo-chave para validação.  
  4. Leitura dos Metadados:  
     - O programa lê o arquivo `.meta` associado para identificar os parâmetros (como salt, parâmetros do Argon2 e tipo de volume) e o método de criptografia utilizado.  
  5. Processo de Decriptação:  
     - Se for um arquivo normal (single-shot ou streaming), as funções `decrypt_data_single` ou `decrypt_data_streaming` são chamadas.  
     - Se for um volume oculto, é solicitado um token efêmero e uma escolha entre volume “falso” ou “real”, direcionando para a rotina específica.
  6. Resultado: O arquivo descriptografado é salvo na mesma pasta, com confirmação na tela.

[4] Criptografar Múltiplos Arquivos

- Fluxo:  
  1. Entrada dos Arquivos: Permite que o usuário informe vários caminhos de arquivos (um por vez).  
  2. Compactação: Os arquivos selecionados são compactados em um arquivo ZIP temporário.  
  3. Arquivo-chave (Opcional): Novamente, oferece a opção de usar um arquivo-chave.  
  4. Criptografia:  
     - Se o arquivo ZIP exceder o limiar de tamanho, a criptografia _streaming_ é usada; caso contrário, é utilizada a versão single-shot.  
     - Os metadados são gerados e cifrados.
  5. Resultado: O arquivo ZIP criptografado é salvo e o usuário é informado.

[5] Gerar Token Efêmero

- Fluxo:  
  1. Geração do Token: Chama a função `generate_ephemeral_token`, que gera um token hexadecimal com 128 bits de entropia.  
  2. Utilidade: Este token é especialmente útil para acessar volumes ocultos, onde o token protege o acesso à parte “real” dos dados.  
  3. Resultado: O token gerado é exibido na tela para que o usuário o anote.

[6] Criar Volume Oculto (Negação Plausível)

- Fluxo:
  1. Seleção de Arquivos: O usuário informa dois caminhos:  
     - Volume Falso: Um arquivo que serve para “encobrir” o real, mostrando dados inofensivos.  
     - Volume Real: O arquivo que contém os dados confidenciais.  
  2. Configuração de Senhas:  
     - Para cada volume, são solicitadas senhas (e opcionalmente um arquivo-chave) além dos parâmetros do Argon2id.  
  3. Criptografia Separada:  
     - Cada arquivo é criptografado individualmente usando a função `encrypt_data_raw_chacha`.  
  4. Criação do Volume Oculto: 
     - Os ciphertexts do volume falso e do volume real são concatenados com um padding intermediário e, em seguida, todo o conjunto é codificado com Reed-Solomon para aumentar a integridade dos dados.  
  5. Token Efêmero:  
     - Um token é gerado e exibido. Este token é necessário para acessar a parte “real” do volume oculto durante a decriptação.  
  6. Metadados Cifrados:  
     - As informações (como tamanho de cada parte, parâmetros de criptografia e nonces) são cifradas e armazenadas em um arquivo `.meta` associado ao volume oculto.
  7. Resultado: O volume oculto é criado e salvo; o usuário recebe o token efêmero e instruções para futuras decriptações.

[0] Sair

- Encerramento:  
  - Selecionar essa opção finaliza a execução do programa.
